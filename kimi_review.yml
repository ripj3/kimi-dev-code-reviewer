# .github/workflows/kimi-review.yml
#
# Kimi-Dev 72 B PR reviewer
# ‚Äì Full repo review (128 K) on first PR commit or manual run,
#   but **skips external libraries & build artefacts**.
# ‚Äì Diff-only review (32 K) on later commits (filtered the same way).
# ‚Äì Concurrency keeps only the newest run per branch.
#
# SECRET required:
#   MOONSHOT_AI_KIMIDEV = sk-xxxxxxxxxxxxxxxxxxxxxxxx
# ------------------------------------------------------------------------------

name: "Kimi code review"

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

concurrency:
  group: kimi-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
# 0Ô∏è‚É£  quick feedback so you see the job is alive
      - run: echo "üïê Kimi review job queued‚Ä¶"

# 1Ô∏è‚É£  checkout repository
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

# 2Ô∏è‚É£  decide scope + model
      - id: ctx
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" || \
                "${{ github.event.action }}" == "opened" ]]; then
            echo "MODE=kimidev-72b-128k" >> "$GITHUB_OUTPUT"
            echo "SCOPE=repo"            >> "$GITHUB_OUTPUT"
          else
            echo "MODE=kimidev-72b-32k"  >> "$GITHUB_OUTPUT"
            echo "SCOPE=diff"            >> "$GITHUB_OUTPUT"
          fi

# 3Ô∏è‚É£  collect code, excluding common library / build folders
      - id: collect
        run: |
          EXCLUDE='node_modules|vendor|dist|build|\.next|\.venv|\.cache|__pycache__'
          if [[ "${{ steps.ctx.outputs.SCOPE }}" == "repo" ]]; then
            git ls-files -z | \
              grep -zEv "(${EXCLUDE})" | \
              xargs -0 cat | head -c 360000 > blob.txt
          else
            curl -sL "${{ github.event.pull_request.diff_url }}" | \
              grep -Ev "^diff --git a/(${EXCLUDE})/" > blob.txt
          fi
          sed -i 's/`/‚Äò‚Äò/g' blob.txt
          echo "FILE=blob.txt" >> "$GITHUB_OUTPUT"

# 4Ô∏è‚É£  call Moonshot
      - id: kimi
        env: { MOONSHOT_KEY: ${{ secrets.MOONSHOT_AI_KIMIDEV }} }
        run: |
          MODEL="${{ steps.ctx.outputs.MODE }}"
          DIFF_JSON=$(jq -Rs . < "${{ steps.collect.outputs.FILE }}")

          jq -n --arg m "$MODEL" --argjson diff "$DIFF_JSON" '{
            model: $m,
            messages: [
              {role:"system",
               content:"You are an expert software engineer. Provide a concise, line-referenced GitHub code review of the content supplied."},
              {role:"user", content: $diff}
            ],
            max_tokens: 512,
            temperature: 0.2
          }' > payload.json

          STATUS=$(curl -s -o resp.json -w "%{http_code}" \
                   -H "Authorization: Bearer $MOONSHOT_KEY" \
                   -H "Content-Type: application/json" \
                   --data @payload.json \
                   https://api.moonshot.ai/v1/chat/completions)

          echo "Moonshot HTTP $STATUS"
          cat resp.json
          [[ "$STATUS" == 200 ]] || exit 1

          jq -r '.choices[0].message.content' resp.json > review.txt
          echo "REVIEW<<EOF" >> "$GITHUB_OUTPUT"
          cat review.txt >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

# 5Ô∏è‚É£  comment on the PR (skipped for manual run)
      - if: github.event_name != 'workflow_dispatch'
        env: { GH_TOKEN: ${{ github.token }} }
        run: |
          BODY=$(jq -Rs '.' <<< "ü§ñ **Kimi-Dev review**  \n_Model:_ ${{ steps.ctx.outputs.MODE }}\n\n$(cat review.txt)")
          curl -s -X POST \
               -H "Authorization: Bearer $GH_TOKEN" \
               -H "Accept: application/vnd.github+json" \
               -d "{\"body\": $BODY}" \
               "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"

# 6Ô∏è‚É£  save raw response (optional)
      - if: always()
        uses: actions/upload-artifact@v4
        with:
          name: moonshot-response
          path: resp.json
